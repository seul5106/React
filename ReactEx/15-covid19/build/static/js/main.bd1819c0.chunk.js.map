{"version":3,"sources":["assets/css/style.module.css","components/Meta.js","components/MyNavLink.js","components/Top.js","reducers/AllReducer.js","components/KoreaStateTable.js","components/KoreaConfirmChart.js","components/KoreaReleaseChart.js","pages/KoreaStatePage.js","reducers/NowReducer.js","components/SidoConfirmAccChart.js","components/SidoStateTable.js","pages/SidoStatePage.js","App.js","serviceWorker.js","reducers/index.js","index.js","assets/img/covid19.jpg"],"names":["module","exports","Meta","props","Helmet","charSet","title","name","content","description","keywords","author","property","image","url","src","defaultProps","covid19","window","location","href","MyNavLink","isActive","pathname","to","exact","classes","className","activeClassName","children","withRouter","Top","type","data-toggle","data-target","id","initialState","loading","result","error","searchActionStart","createAction","searchSuccessAction","searchFailureAction","handleActions","state","action","payload","KoreaStateTable","accState","moment","기준시각","format","Number","확진환자","toLocaleString","격리해제","격리중","사망","KoreaConfirmChart","confirmState","날짜","일일확진","누적확진","data","datasets","label","borderColor","borderWidth","pointBorderColor","pointBackgroundColor","pointRadius","yAxisID","backgroundColor","options","responsive","elements","line","fill","legend","position","scales","xAxes","display","gridLines","labels","yAxes","show","ticks","fontColor","fontSize","fontFamily","min","max","maxValue","Math","apply","axisMaxValue","parseInt","floor","stepSize","KoreaReleaseChart","releaseState","누적격리해제","일일격리해제","React","memo","useSelector","allReducer","dispatch","useDispatch","useEffect","a","axios","get","response","collection_datetime","cityData","cityNames","Object","getOwnPropertyNames","console","debug","forEach","v","p","cityItem","group","groupEnd","lastIndex","confirmed_acc","length","released_acc","active","death_acc","i","j","indexOf","date","push","confirmed","released","color","height","width","style","left","top","marginLeft","marginTop","SidoConfirmAccChart","chartData","지역명","hoverBackgroundColor","hoverBorderColor","누적확진자","SidoStateTable","mt30","rowspan","colspan","map","item","index","key","region","confirmed_prev","death","nowReducer","tmp1","tmp2","App","containerTop","path","component","KoreaStatePage","SidoStatePage","footer","Boolean","hostname","match","combineReducers","logger","createLogger","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bd1819c0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerTop\":\"style_containerTop__oU21S\",\"footer\":\"style_footer__2rRfa\",\"mt30\":\"style_mt30__1PSso\"};","import React from 'react';\r\n\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport covid19 from '../assets/img/covid19.jpg';\r\n\r\nconst Meta = (props) => {\r\n    return (\r\n        <Helmet>\r\n            <meta charSet='utf-8' />\r\n            <title>{props.title}</title>\r\n            {/* SEO 태그 */}\r\n            <meta name='description' content={props.description} />\r\n            <meta name='keywords' content={props.keywords} />\r\n            <meta name='author' content={props.author} />\r\n            <meta property='og:type' content='website' />\r\n            <meta property='og:title' content={props.title} />\r\n            <meta property='og:description' content={props.description} />\r\n            <meta property='og:image' content={props.image} />\r\n            <meta property='og:url' content={props.url} />\r\n\r\n            {/* 추가적으로 적용해야할 외부 js나 css를 여기서 명시할 수 있다. */}\r\n            <script src=\"//code.jquery.com/jquery.min.js\"></script>\r\n            <script src=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\r\n        </Helmet>\r\n    );\r\n};\r\n\r\nMeta.defaultProps = {\r\n    title: '리액트 코로나19 상황판',\r\n    description: 'React.js로 구현한 코로나19 상황판',\r\n    keywords: 'React,코로나19,Covid19',\r\n    author: '호쌤',\r\n    image: covid19,\r\n    url: window.location.href\r\n}\r\n\r\nexport default Meta;\r\n","import React from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\n// props에 전달되는 location, history 객체는 \r\n// 이 js 컴포넌트가 <Switch><Route ...></Switch>에 명시된 경우만 사용할 수 있다.\r\n// 하지만 export시에 withRouter()함수로 가공하면 \r\n// Route를 거치지 않더라도 props에 location 객체가 전달된다.\r\nconst MyNavLink = (props) => {\r\n    // 현재 웹 브라우저에 표시되고 있는 URL이 to 속성에 지정된 값과 일치하는지 여부를 boolean값으로 저장\r\n    const isActive = (props.location.pathname === props.to);\r\n    const exact = (props.exact === true);\r\n\r\n    // 기본 class 이름\r\n    let classes = props.className;\r\n\r\n    // isActive가 true인 경우 activeClassName 병합\r\n    if (isActive) {\r\n        classes += \" \" + props.activeClassName;\r\n    }\r\n\r\n    return (\r\n        <li className={classes}>\r\n            <Link to={props.to} exact={exact}>{props.children}</Link>\r\n        </li>\r\n    );\r\n};\r\n\r\nMyNavLink.defaultProps = {\r\n    className: '',\r\n    exact: false,\r\n    to: '#',\r\n    children: ''\r\n};\r\n\r\nexport default withRouter(MyNavLink);\r\n","import React from 'react';\r\n\r\nimport MyNavLink from './MyNavLink';\r\n\r\nconst Top = () => {\r\n    return (\r\n        <div>\r\n            {/* bootstrap 메뉴바, 색상반전, 상단 고정 */}\r\n            <nav className='navbar navbar-inverse navbar-fixed-top'>\r\n                {/* 메뉴 안에서의 컨텐츠 영역 넓이 조정 */}\r\n                <div className='container'>\r\n                    {/* 로고 + 모바일 메뉴 버튼 */}\r\n                    <div className='navbar-header'>\r\n                        <button type='button' className='navbar-toggle collapsed' data-toggle='collapse' data-target='#navbar-collapse'>\r\n                            <span className='sr-only'>Toggle navigation</span>\r\n                            <span className='icon-bar'></span>\r\n                            <span className='icon-bar'></span>\r\n                            <span className='icon-bar'></span>\r\n                        </button>\r\n                        <a className='navbar-brand' href='/'>\r\n                            React 코로나19 상황판\r\n                        </a>\r\n                    </div>\r\n\r\n                    {/* 메뉴 영역 */}\r\n                    <div className='collapse navbar-collapse' id='navbar-collapse'>\r\n                        {/* 메뉴 항목들 */}\r\n                        <ul className=\"nav navbar-nav\">\r\n                            <MyNavLink to=\"/korea_state\" exact={true} activeClassName='active'>국내 발생 현황</MyNavLink>\r\n                            <MyNavLink to=\"/sido_state\" activeClassName='active'>시도별 발생 동향</MyNavLink>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Top;\r\n","import { handleActions, createAction } from 'redux-actions';\r\nimport axios from 'axios';   // for ajax\r\nimport moment from 'moment'; // for 날짜 처리\r\n\r\n/** 1) 상태값 - 단순한 json 객체. */\r\nconst initialState = {\r\n    loading: false,     // 통신여부 (Ajax 시작시 true로 변경)\r\n    result: null,       // 컴포넌트에 출력할 결과가 저장될 객체 (Ajax 연동 결과)\r\n    error: false        // 에러 발생 여부 (실패시 true로 변경)\r\n};\r\n\r\n/** 2) 액션 - 컴포넌트가 겪는 상황을 구분하는 문자열 값 */\r\n// --> 일반적으로 Ajax 처리를 수행할 때는 하나의 기능에 3개의 상태값을 둔다.\r\n// 리스트 가져오기 시작 --> loading값을 true로, error는 false로 변경\r\nconst SEARCH_START   = 'covidAll/SEARCH_START';\r\n// 리스트 가져오기 성공 --> loading과 error를 false로 변경, result를 할당한다.\r\nconst SEARCH_SUCCESS = 'covidAll/SEARCH_SUCCESS';\r\n// 리스트 가져오기 실패 --> loading값을 false로, error는 true로 변경\r\nconst SEARCH_FAILURE = 'covidAll/SEARCH_FAILURE';\r\n\r\n/** 3) 액션 생성 함수 - 액션 객체를 만들어서 리턴한다. */\r\n// ReduxThunk에 의한 비동기 함수안에서 Ajax 처리 후, 결과를 반환하기 위해 이 함수들을 dispatch한다.\r\nexport const searchActionStart   = createAction(SEARCH_START);\r\nexport const searchSuccessAction = createAction(SEARCH_SUCCESS);\r\nexport const searchFailureAction = createAction(SEARCH_FAILURE);\r\n\r\n/** 4) 리듀서를 활용하여 스토어에 연결할 Action 정의하기 */\r\n// Ajax 연동 상황에 따라 미리 정의한 상태값을 갱신하기만 하면 된다.\r\nexport default handleActions(\r\n    {\r\n        // 리스트 가져오기 시작 --> loading값을 true로, error는 false로 변경\r\n        [SEARCH_START]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false\r\n            };\r\n        },\r\n        // 리스트 가져오기 성공 --> loading과 error를 false로 변경, result를 할당한다.\r\n        [SEARCH_SUCCESS]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                // 백엔드에서 전달하는 JSON 데이터 전문은 항상 action.payload 로 전달된다. \r\n                // 이 값을 통째로 활용할 것인지, 일부만 활용할 것인지에 따라\r\n                // result에 채워 넣을 값이 결정된다.\r\n                loading: false,\r\n                result: action.payload.result,\r\n                error: false\r\n            };\r\n        },\r\n        // 리스트 가져오기 실패 --> loading값을 false로, error는 true로 변경\r\n        [SEARCH_FAILURE]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true\r\n            };\r\n        }\r\n    },\r\n    initialState\r\n);\r\n\r\n/** 5) 비동기 작업을 수행할 함수 정의 (ReduxThunk 적용) */\r\n// 컴포넌트에서 이벤트가 발생한 경우나 useEffect()를 통해 특정 값이 변경된 경우 호출될 함수 하나만 정의하고\r\n// 이 안에서 실행 결과를 반영하는 상태 함수를 선택적으로 호출하도록 구현한다.\r\nexport const allAsync = () => async dispatch => {\r\n    /** Ajax 시작을 알림 --> 컴포넌트에서 로딩바를 표시하기 위함 */\r\n    // 검색 시작 --> loading값을 true로, error는 false로 변경\r\n    dispatch(searchActionStart());\r\n\r\n    /** Ajax 구현 */\r\n    // 예외처리: try 블록을 실행하는 도중 에러가 발생하면 그 즉시 처리를 중단하고 catch 블록으로 제어가 이동한다.\r\n    try {\r\n        // Ajax 연동 결과로 전달되는 JSON 전문은 response.data 로 접근할 수 있다.\r\n        const apiUrl = 'http://itpaper.co.kr/demo/covid19/all.php';\r\n        const response = await axios.get(apiUrl);\r\n\r\n        /** 통신결과 중에서 각 컴포넌트에 전달할 값을 추려낸다. */\r\n\r\n        // 1) 누적 확진자 현황\r\n        const accState = {'기준시각': response.data.collection_datetime, '확진환자': 0, '격리해제': 0, '격리중': 0, '사망': 0};\r\n\r\n        // 2) 일주일간의 확진자 현황\r\n        const confirmState = {'날짜': [], '누적확진': [], '일일확진': []}\r\n\r\n        // 3) 일주일간의 격리해제 현황\r\n        const releaseState = {'날짜': [], '누적격리해제': [], '일일격리해제': []}\r\n\r\n        // 지역별 데이터만 추출\r\n        // --> response.data는 ajax를 통해 얻은 json 결과.\r\n        // --> response.data.data는 ajax결과 안에 포함된 data라는 이름의 key\r\n        const cityData = response.data.data;\r\n\r\n        // 지역명만 추출 (json의 key만 추출)\r\n        const cityNames = Object.getOwnPropertyNames(cityData);\r\n        console.debug(cityNames);\r\n\r\n        // 지역수 만큼 반복\r\n        cityNames.forEach((v, p) => {\r\n            // 도시 하나를 추출한다. --> 배열형태임\r\n            const cityItem = cityData[v];\r\n            console.group(v);\r\n            console.debug(cityItem);\r\n            console.groupEnd();\r\n\r\n            // 가장 마지막 원소를 가져온다(가장 최근 데이터)\r\n            const lastIndex = cityItem.confirmed_acc.length - 1;\r\n\r\n            // 전국 데이터를 모아야 하므로 각 도시 값을 합산한다.\r\n            accState.확진환자 += cityItem.confirmed_acc[lastIndex];\r\n            accState.격리해제 += cityItem.released_acc[lastIndex];\r\n            accState.격리중 += cityItem.active[lastIndex];\r\n            accState.사망 += cityItem.death_acc[lastIndex];\r\n\r\n            // 일주일 전에 해당하는 위치를 가리키는 인덱스\r\n            const weekIndex = cityItem.confirmed_acc.length - 8;\r\n\r\n            // 일주일치를 반복(i=ajax로 가져온 전체 배열의 index, j는 그래프용으로 생성한 weekState의 index)\r\n            for (let i=weekIndex, j=0; i<cityItem.confirmed_acc.length; i++, j++) {\r\n                // `confirmState.날짜` 배열에 cityItem.date[i] 과 일치하는 값의 위치를 검색\r\n                // --> 일치하는 정보가 없다면(=신규로 추가되는 데이터라면?) -1이 반환됨.\r\n                if (confirmState.날짜.indexOf(cityItem.date[i]) === -1) {\r\n                    // 신규 항목이므로 데이터 추가\r\n                    confirmState.날짜.push(cityItem.date[i]);\r\n                    confirmState.누적확진.push(parseInt(cityItem.confirmed_acc[i]));\r\n                    confirmState.일일확진.push(parseInt(cityItem.confirmed[i]));\r\n                    releaseState.날짜.push(cityItem.date[i]);\r\n                    releaseState.누적격리해제.push(parseInt(cityItem.released_acc[i]));\r\n                    releaseState.일일격리해제.push(parseInt(cityItem.released[i]));\r\n                } else {\r\n                    confirmState.누적확진[j] += parseInt(cityItem.confirmed_acc[i]);\r\n                    confirmState.일일확진[j] += parseInt(cityItem.confirmed[i]);\r\n                    releaseState.누적격리해제[j] += parseInt(cityItem.released_acc[i]);\r\n                    releaseState.일일격리해제[j] += parseInt(cityItem.released[i]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // 추출한 값을 통신 결과에 병합한다.\r\n        response.data.accState = accState;\r\n        response.data.confirmState = confirmState;\r\n        response.data.releaseState = releaseState;\r\n\r\n        console.group(\"누적 확진자 현황\");\r\n        console.debug(accState);\r\n        console.groupEnd();\r\n\r\n        console.group(\"일주일간의 확진자 현황\");\r\n        console.debug(confirmState);\r\n        console.groupEnd();\r\n\r\n        console.group(\"일주일간의 격리해제 현황\");\r\n        console.debug(releaseState);\r\n        console.groupEnd();\r\n\r\n        // Ajax 결과를 로그에 출력해 보자!!!\r\n        console.group(\"통신결과\");\r\n        console.debug(response);\r\n        console.groupEnd();\r\n\r\n        /** 통신처리 --> loading값을 false로, result는 채우고, error는 false로 처리 */\r\n        // 여기서 전달하는 파라미터가 action 함수 안에서 `action.payload`가 된다.\r\n        dispatch(searchSuccessAction({result: response.data}));\r\n    } catch (e) {\r\n        console.error(e);\r\n        // 에러가 발생했음을 알림 --> loading값을 false로, error는 true로 변경\r\n        dispatch(searchFailureAction());\r\n    }\r\n};","import React from 'react';\r\nimport moment from 'moment';\r\n\r\n// {'기준시각': response.data.collection_datetime, '확진환자': 0, '격리해제': 0, '격리중': 0, '사망': 0}\r\nconst KoreaStateTable = ({ accState }) => {\r\n    return (\r\n        <div>\r\n            <h3>\r\n                누적 확진자 현황 <small>({moment(accState.기준시각).format('M/D h')}시 기준)</small>\r\n            </h3>\r\n            <div className='table-responsive'>\r\n                <table className='table table-bordered'>\r\n                    <thead>\r\n                        <tr>\r\n                            <th className='text-center success'>확진환자</th>\r\n                            <th className='text-center success'>격리해제</th>\r\n                            <th className='text-center success'>격리중</th>\r\n                            <th className='text-center success'>사망</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td className='text-center'>{Number(accState.확진환자).toLocaleString()}</td>\r\n                            <td className='text-center'>{Number(accState.격리해제).toLocaleString()}</td>\r\n                            <td className='text-center'>{Number(accState.격리중).toLocaleString()}</td>\r\n                            <td className='text-center'>{Number(accState.사망).toLocaleString()}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// 값의 출처가 Ajax인 경우 실제 값이 수신되기 까지 시간차가 발생하기 때문에,\r\n// 값이 존재하지 않는 타이밍이 있을 수 있다.\r\n// 이 상황을 방지하기 위해 기본속성을 반드시 정의해야 한다.\r\nKoreaStateTable.defaultProps = {\r\n    accState: {\r\n        기준시각: null,\r\n        확진환자: 0,\r\n        격리해제: 0,\r\n        격리중: 0,\r\n        사망: 0,\r\n    },\r\n};\r\n\r\nexport default KoreaStateTable;\r\n","import React from 'react';\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst KoreaConfirmChart = ({confirmState}) => {\r\n    // 전달받은 데이터를 비구조 문법으로 개별 추출\r\n    const {날짜, 일일확진, 누적확진} = confirmState;\r\n\r\n    /** 그래프에 표시될 데이터셋 */\r\n    const data = {\r\n        // 다중 그래프 처리시 데이터 항목들 정의 (마지막 데이터셋이 화면상에서 뒤에 배치됨)\r\n        datasets: [\r\n            // 일일확진 선 그래프\r\n            {\r\n                label: '일 확진환자',\r\n                type: 'line',\r\n                data: 일일확진,\r\n                borderColor: '#FF8400',\r\n                borderWidth: 2.5,\r\n                pointBorderColor: '#FFFFFF',\r\n                pointBackgroundColor: '#FF8400',\r\n                pointRadius: 6,\r\n                yAxisID: 'y-axis-2'     // y축에 부여할 식별자 --> options에서 연결해서 속성을 명시함.\r\n            },\r\n            // 누적확진 막대 그래프\r\n            {\r\n                type: 'bar',\r\n                label: '누적확진환자',\r\n                data: 누적확진,\r\n                backgroundColor: '#3571CC',\r\n                yAxisID: 'y-axis-1'     // y축에 부여할 식별자 --> options에서 연결해서 속성을 명시함.\r\n            },\r\n        ],\r\n    };\r\n\r\n    /** 그래프 표시 옵션 */\r\n    const options = {\r\n        responsive: true,       // 반응형 기능 켬\r\n        elements: {\r\n            line: {\r\n                fill: false,    // 지정하지 않을 경우 선 그래프의 아래쪽에 반투명으로 색상이 채워짐\r\n            },\r\n        },\r\n        legend: {\r\n            position: 'bottom'  // 범주 위치 지정\r\n        },\r\n        // 축 정보\r\n        scales: {\r\n            // x축은 두 개의 그래프가 공유하므로 하나의 정보만 정의\r\n            xAxes: [\r\n                {\r\n                    display: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    },\r\n                    labels: 날짜,\r\n                },\r\n            ],\r\n            // y축은 그래프의 수 만큼 나열되어야 한다.\r\n            yAxes: [\r\n                // 왼쪽 y축\r\n                {\r\n                    id: 'y-axis-1',\r\n                    type: 'linear',\r\n                    display: true,\r\n                    position: 'left',\r\n                    gridLines: {\r\n                        display: true,\r\n                    },\r\n                    labels: {\r\n                        show: true,\r\n                    },\r\n                    ticks: {\r\n                        fontColor: '#666',\r\n                        fontSize: 10,\r\n                        fontFamily: \"Lato\",\r\n                        min: 0,\r\n                        max: (function(){\r\n                            // 배열에서 가장 큰 값 찾기\r\n                            const maxValue = Math.max.apply(null, 누적확진);\r\n                            // 찾아낸 최대값의 120% 산출\r\n                            const axisMaxValue = parseInt(maxValue * 1.2);\r\n                            // 값을 1000단위로 끊어냄(올림)\r\n                            const max = Math.floor(axisMaxValue / 1000) * 1000;\r\n                            return max;\r\n                        })(),\r\n                        stepSize: 2000\r\n                    },\r\n                },\r\n                // 오른쪽 y축\r\n                {\r\n                    id: 'y-axis-2',\r\n                    type: 'linear',\r\n                    display: true,\r\n                    position: 'right',\r\n                    gridLines: {\r\n                        display: false,\r\n                    },\r\n                    labels: {\r\n                        show: true,\r\n                    },\r\n                    ticks: {\r\n                        fontColor: '#666',\r\n                        fontSize: 10,\r\n                        fontFamily: \"Lato\",\r\n                        min: 0,\r\n                        max: (function(){\r\n                            // 배열에서 가장 큰 값 찾기\r\n                            const maxValue = Math.max.apply(null, 일일확진);\r\n                            // 찾아낸 최대값의 150% 산출\r\n                            const axisMaxValue = parseInt(maxValue * 1.5);\r\n                            // 값을 10단위로 끊어냄(올림)\r\n                            const max = parseInt(Math.floor(axisMaxValue / 10) * 10);\r\n                            return max;\r\n                        })(),\r\n                        stepSize: 10\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>일일 및 누적 확진환자 추세</h3>\r\n            <Bar data={data} options={options} />\r\n        </div>\r\n    );\r\n};\r\n\r\nKoreaConfirmChart.defaultProps = {\r\n    confirmState: {\r\n        날짜: null,\r\n        누적확진: 0,\r\n        일일확진: 0\r\n    },\r\n};\r\n\r\nexport default KoreaConfirmChart;","import React from 'react';\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst KoreaReleaseChart = ({releaseState}) => {\r\n\r\n    const {날짜, 누적격리해제, 일일격리해제} = releaseState;\r\n\r\n    /** 그래프에 표시될 데이터셋 */\r\n    const data = {\r\n        // 다중 그래프 처리시 데이터 항목들 정의 (마지막 데이터셋이 화면상에서 뒤에 배치됨)\r\n        datasets: [\r\n            // 일일확진 선 그래프\r\n            {\r\n                label: '일 격리해제',\r\n                type: 'line',\r\n                data: 일일격리해제,\r\n                borderColor: '#1F7CCB',\r\n                borderWidth: 2.5,\r\n                pointBorderColor: '#FFFFFF',\r\n                pointBackgroundColor: '#1F7CCB',\r\n                pointRadius: 6,\r\n                yAxisID: 'y-axis-2'     // y축에 부여할 식별자 --> options에서 연결해서 속성을 명시함.\r\n            },\r\n            // 누적확진 막대 그래프\r\n            {\r\n                type: 'bar',\r\n                label: '누적격리해제',\r\n                data: 누적격리해제,\r\n                backgroundColor: '#E0217B',\r\n                yAxisID: 'y-axis-1'     // y축에 부여할 식별자 --> options에서 연결해서 속성을 명시함.\r\n            },\r\n        ],\r\n    };\r\n\r\n    /** 그래프 표시 옵션 */\r\n    const options = {\r\n        responsive: true,       // 반응형 기능 켬\r\n        elements: {\r\n            line: {\r\n                fill: false,    // 지정하지 않을 경우 선 그래프의 아래쪽에 반투명으로 색상이 채워짐\r\n            },\r\n        },\r\n        legend: {\r\n            position: 'bottom'  // 범주 위치 지정\r\n        },\r\n        // 축 정보\r\n        scales: {\r\n            // x축은 두 개의 그래프가 공유하므로 하나의 정보만 정의\r\n            xAxes: [\r\n                {\r\n                    display: true,\r\n                    gridLines: {\r\n                        display: false,\r\n                    },\r\n                    labels: 날짜,\r\n                },\r\n            ],\r\n            // y축은 그래프의 수 만큼 나열되어야 한다.\r\n            yAxes: [\r\n                // 왼쪽 y축\r\n                {\r\n                    id: 'y-axis-1',\r\n                    type: 'linear',\r\n                    display: true,\r\n                    position: 'left',\r\n                    gridLines: {\r\n                        display: true,\r\n                    },\r\n                    labels: {\r\n                        show: true,\r\n                    },\r\n                    ticks: {\r\n                        fontColor: '#666',\r\n                        fontSize: 10,\r\n                        fontFamily: \"Lato\",\r\n                        min: 0,\r\n                        max: (function(){\r\n                            // 배열에서 가장 큰 값 찾기\r\n                            const maxValue = Math.max.apply(null, 누적격리해제);\r\n                            // 찾아낸 최대값의 120% 산출\r\n                            const axisMaxValue = parseInt(maxValue * 1.2);\r\n                            // 값을 1000단위로 끊어냄(올림)\r\n                            const max = Math.floor(axisMaxValue / 1000) * 1000;\r\n                            return max;\r\n                        })(),\r\n                        stepSize: 2000\r\n                    },\r\n                },\r\n                // 오른쪽 y축\r\n                {\r\n                    id: 'y-axis-2',\r\n                    type: 'linear',\r\n                    display: true,\r\n                    position: 'right',\r\n                    gridLines: {\r\n                        display: false,\r\n                    },\r\n                    labels: {\r\n                        show: true,\r\n                    },\r\n                    ticks: {\r\n                        fontColor: '#666',\r\n                        fontSize: 10,\r\n                        fontFamily: \"Lato\",\r\n                        min: 0,\r\n                        max: (function(){\r\n                            // 배열에서 가장 큰 값 찾기\r\n                            const maxValue = Math.max.apply(null, 일일격리해제);\r\n                            // 찾아낸 최대값의 150% 산출\r\n                            const axisMaxValue = parseInt(maxValue * 1.5);\r\n                            // 값을 10단위로 끊어냄(올림)\r\n                            const max = parseInt(Math.floor(axisMaxValue / 10) * 10);\r\n                            return max;\r\n                        })(),\r\n                        stepSize: 10\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>확진환자 내 일일 및 누적 격리해제 추세</h3>\r\n            <Bar data={data} options={options} />\r\n        </div>\r\n    );\r\n};\r\n\r\nKoreaReleaseChart.defaultProps = {\r\n    releaseState: {\r\n        날짜: null,\r\n        누적격리해제: 0,\r\n        일일격리해제: 0\r\n    },\r\n};\r\n\r\nexport default KoreaReleaseChart;","import React from \"react\";\r\n\r\n// 'react-redux' 패키지에서 제공하는 hook 함수\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// 모듈기능 참조\r\nimport * as allReducer from \"../reducers/AllReducer\";\r\n\r\n// CSS 참조\r\nimport style from \"../assets/css/style.module.css\";\r\n\r\n// 컴포넌트 참조\r\nimport Meta from \"../components/Meta\";\r\nimport KoreaStateTable from '../components/KoreaStateTable';\r\nimport KoreaConfirmChart from '../components/KoreaConfirmChart';\r\nimport KoreaReleaseChart from '../components/KoreaReleaseChart';\r\n\r\n// 로딩컴포넌트\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst KoreaStatePage = () => {\r\n    /** Hook 기능을 통해 리덕스 상태값 가져오기 */\r\n    const { result, loading, error } = useSelector((state) => {\r\n        return {\r\n            ...state.allReducer,\r\n        };\r\n    });\r\n\r\n    /** action함수를 dispatch 시키기 위한 기능 가져오기 */\r\n    const dispatch = useDispatch();\r\n\r\n    /** 컴포넌트가 화면에 나타날 때 실행되는 hook 정의 */\r\n    // 여기서 모듈에 정의해 놓은 thunk 함수를 dispatch하면 redux의 액션 함수가 실행되면서 상태값을 갱신하게 된다.\r\n    React.useEffect(() => {\r\n        dispatch(allReducer.allAsync());\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container containerTop\">\r\n            <Meta\r\n                title=\"국내 발생 현황 ::: 리액트 코로나19 상황판\"\r\n                description=\"React.js로 구현한 코로나 19의 국내 발생 현황 상황판 입니다.\"\r\n                keywords=\"React,코로나19,Covid19,국내발생현황\"\r\n            />\r\n\r\n            <div className=\"page-header\">\r\n                <h2>코로나19 국내 발생 현황</h2>\r\n            </div>\r\n\r\n            {loading ? (\r\n                <Loader\r\n                    type=\"Bars\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: \"50%\",\r\n                        top: \"50%\",\r\n                        marginLeft: \"-50px\",\r\n                        marginTop: \"-50px\",\r\n                    }}\r\n                />\r\n            ) : (\r\n                // 결과값(result)이 있을 때만 화면 출력\r\n                // result.accState => {'기준시각': response.data.collection_datetime, '확진환자': 0, '격리해제': 0, '격리중': 0, '사망': 0}\r\n                result && (\r\n                    <div>\r\n                        <KoreaStateTable accState={result.accState} />\r\n                        <KoreaConfirmChart confirmState={result.confirmState} />\r\n                        <KoreaReleaseChart releaseState={result.releaseState} />\r\n                    </div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// 리덕스를 호출하는 페이지의 성능 향상을 위해\r\n// React.memo()로 가공된 결과를 export 한다.\r\nexport default React.memo(KoreaStatePage);\r\n","import { handleActions, createAction } from 'redux-actions';\r\nimport axios from 'axios';   // for ajax\r\nimport moment from 'moment'; // for 날짜 처리\r\n\r\n/** 1) 상태값 - 단순한 json 객체. */\r\nconst initialState = {\r\n    loading: false,     // 통신여부 (Ajax 시작시 true로 변경)\r\n    result: null,       // 컴포넌트에 출력할 결과가 저장될 객체 (Ajax 연동 결과)\r\n    error: false        // 에러 발생 여부 (실패시 true로 변경)\r\n};\r\n\r\n/** 2) 액션 - 컴포넌트가 겪는 상황을 구분하는 문자열 값 */\r\n// --> 일반적으로 Ajax 처리를 수행할 때는 하나의 기능에 3개의 상태값을 둔다.\r\n// 리스트 가져오기 시작 --> loading값을 true로, error는 false로 변경\r\nconst SEARCH_START   = 'coivdNow/SEARCH_START';\r\n// 리스트 가져오기 성공 --> loading과 error를 false로 변경, result를 할당한다.\r\nconst SEARCH_SUCCESS = 'coivdNow/SEARCH_SUCCESS';\r\n// 리스트 가져오기 실패 --> loading값을 false로, error는 true로 변경\r\nconst SEARCH_FAILURE = 'coivdNow/SEARCH_FAILURE';\r\n\r\n/** 3) 액션 생성 함수 - 액션 객체를 만들어서 리턴한다. */\r\n// ReduxThunk에 의한 비동기 함수안에서 Ajax 처리 후, 결과를 반환하기 위해 이 함수들을 dispatch한다.\r\nexport const searchActionStart   = createAction(SEARCH_START);\r\nexport const searchSuccessAction = createAction(SEARCH_SUCCESS);\r\nexport const searchFailureAction = createAction(SEARCH_FAILURE);\r\n\r\n/** 4) 리듀서를 활용하여 스토어에 연결할 Action 정의하기 */\r\n// Ajax 연동 상황에 따라 미리 정의한 상태값을 갱신하기만 하면 된다.\r\nexport default handleActions(\r\n    {\r\n        // 리스트 가져오기 시작 --> loading값을 true로, error는 false로 변경\r\n        [SEARCH_START]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: false\r\n            };\r\n        },\r\n        // 리스트 가져오기 성공 --> loading과 error를 false로 변경, result를 할당한다.\r\n        [SEARCH_SUCCESS]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                // 백엔드에서 전달하는 JSON 데이터 전문은 항상 action.payload 로 전달된다. \r\n                // 이 값을 통째로 활용할 것인지, 일부만 활용할 것인지에 따라\r\n                // result에 채워 넣을 값이 결정된다.\r\n                loading: false,\r\n                result: action.payload.result,\r\n                error: false\r\n            };\r\n        },\r\n        // 리스트 가져오기 실패 --> loading값을 false로, error는 true로 변경\r\n        [SEARCH_FAILURE]: (state = initialState, action) => {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: true\r\n            };\r\n        }\r\n    },\r\n    initialState\r\n);\r\n\r\n/** 5) 비동기 작업을 수행할 함수 정의 (ReduxThunk 적용) */\r\n// 컴포넌트에서 이벤트가 발생한 경우나 useEffect()를 통해 특정 값이 변경된 경우 호출될 함수 하나만 정의하고\r\n// 이 안에서 실행 결과를 반영하는 상태 함수를 선택적으로 호출하도록 구현한다.\r\nexport const nowAsync = () => async dispatch => {\r\n    /** Ajax 시작을 알림 --> 컴포넌트에서 로딩바를 표시하기 위함 */\r\n    // 검색 시작 --> loading값을 true로, error는 false로 변경\r\n    dispatch(searchActionStart());\r\n\r\n    /** Ajax 구현 */\r\n    // 예외처리: try 블록을 실행하는 도중 에러가 발생하면 그 즉시 처리를 중단하고 catch 블록으로 제어가 이동한다.\r\n    try {\r\n        // Ajax 연동 결과로 전달되는 JSON 전문은 response.data 로 접근할 수 있다.\r\n        const apiUrl = 'http://itpaper.co.kr/demo/covid19/now.php';\r\n        const response = await axios.get(apiUrl);\r\n\r\n        /** 통신결과 중에서 그래프에 출력하기 위한 값을 추려낸다. */\r\n        const chartData = {지역명: [], 누적확진자: []}\r\n\r\n        response.data.state.forEach((v, i) => {\r\n            chartData.지역명[i] = v.region;\r\n            chartData.누적확진자[i] = v.confirmed;\r\n        });\r\n\r\n        // 누적확진자 값이 큰 순서대로 정렬하기 위한 순차정렬 알고리즘 적용 \r\n        for (let i=0; i<chartData.누적확진자.length-1; i++) {\r\n            for (let j=i+1; j<chartData.누적확진자.length; j++) {\r\n                if (chartData.누적확진자[i] < chartData.누적확진자[j]) {\r\n                    const tmp1 = chartData.누적확진자[i];\r\n                    chartData.누적확진자[i] = chartData.누적확진자[j];\r\n                    chartData.누적확진자[j] = tmp1;\r\n\r\n                    const tmp2 = chartData.지역명[i];\r\n                    chartData.지역명[i] = chartData.지역명[j];\r\n                    chartData.지역명[j] = tmp2;\r\n                }\r\n            }\r\n        }\r\n\r\n        // 추려낸 값을 통신 결과에 병합한다.\r\n        response.data.chartData = chartData;\r\n\r\n        // Ajax 결과를 로그에 출력해 보자!!!\r\n        console.group(\"통신결과\");\r\n        console.debug(response);\r\n        console.groupEnd();\r\n\r\n        /** 통신처리 --> loading값을 false로, result는 채우고, error는 false로 처리 */\r\n        // 여기서 전달하는 파라미터가 action 함수 안에서 `action.payload`가 된다.\r\n        dispatch(searchSuccessAction({result: response.data}));\r\n    } catch (e) {\r\n        console.error(e);\r\n        // 에러가 발생했음을 알림 --> loading값을 false로, error는 true로 변경\r\n        dispatch(searchFailureAction());\r\n    }\r\n};","import React from 'react';\r\n\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\n\r\nconst SidoConfirmAccChart = ({chartData}) => {\r\n\r\n    /** chart에 표시될 데이터 (막대그래프용) */\r\n    const data = {\r\n        // x축에 나타날 항목들\r\n        labels: chartData.지역명,\r\n        // y축의 값을 비롯한 기타 옵션들\r\n        datasets: [\r\n            {\r\n                // 그래프 제목\r\n                label: '시,도별 누적 확진자 현황',\r\n                backgroundColor: '#15A8DE',\r\n                borderColor: '#15A8DE',\r\n                borderWidth: 0,\r\n                hoverBackgroundColor: '#15A8DE',\r\n                hoverBorderColor: '#15A8DE',\r\n                // 그래프 각 항목별 y축 수치값\r\n                data: chartData.누적확진자,\r\n            }\r\n        ]\r\n    };\r\n\r\n    /** 그래프 표시 옵션 */\r\n    const options = {\r\n        // 범주 위치 지정\r\n        legend: { position: 'bottom', },\r\n        // 축 정보\r\n        scales: {\r\n            xAxes: [{\r\n                gridLines: { display: true }\r\n            }],\r\n            yAxes: [{\r\n                gridLines: { display: false }\r\n            }],\r\n        },\r\n    };\r\n\r\n    return (\r\n        <HorizontalBar data={data} height={130} options={options} />\r\n    );\r\n};\r\n\r\nSidoConfirmAccChart.defaultProps = {\r\n    chartData: {\r\n        지역명: [],\r\n        누적확진자: [],\r\n    },\r\n};\r\n\r\nexport default SidoConfirmAccChart;","import React from 'react';\r\n\r\nimport style from '../assets/css/style.module.css';\r\n\r\nconst SidoStateTable = ({state}) => {\r\n    return (\r\n        <div className={'table-responsive ' + style.mt30}>\r\n            <table className=\"table table-hover table-bordered\">\r\n                <thead>\r\n                    <tr className=\"success\">\r\n                        <th className=\"text-center\" rowspan=\"2\">시도명</th>\r\n                        <th className=\"text-center\" rowspan=\"2\">전일대비<br/>확진환자 증감</th>\r\n                        <th className=\"text-center\" colspan=\"4\">확진환자 (명)</th>\r\n                    </tr>\r\n                    <tr className=\"success\">\r\n                        <th className=\"text-center\">확진환자</th>\r\n                        <th className=\"text-center\">격리중</th>\r\n                        <th className=\"text-center\">격리해제</th>\r\n                        <th className=\"text-center\">사망자</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {state && state.map((item, index) => (\r\n                        <tr key={index}>\r\n                            <th className='text-center'>{item.region}</th>\r\n                            <td className='text-center'>{Number(item.confirmed-item.confirmed_prev).toLocaleString()}명</td>\r\n                            <td className='text-center'>{Number(item.confirmed).toLocaleString()}명</td>\r\n                            <td className='text-center'>{Number(item.active).toLocaleString()}명</td>\r\n                            <td className='text-center'>{Number(item.released).toLocaleString()}명</td>\r\n                            <td className='text-center'>{Number(item.death).toLocaleString()}명</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\n// 컴포넌트는 항상 자신의 props에 원하는 key가 포함되지 않을 경우에 대비하는 것이 좋다.\r\nSidoStateTable.defaultProps = {\r\n    state: []\r\n};\r\n\r\nexport default SidoStateTable;","import React from 'react';\r\n\r\n// 'react-redux' 패키지에서 제공하는 hook 함수\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// 모듈기능 참조\r\nimport * as nowReducer from \"../reducers/NowReducer\";\r\n\r\n// CSS 참조\r\nimport style from \"../assets/css/style.module.css\";\r\n\r\n// 컴포넌트 참조\r\nimport Meta from \"../components/Meta\";\r\nimport SidoConfirmAccChart from '../components/SidoConfirmAccChart';\r\nimport SidoStateTable from '../components/SidoStateTable';\r\n\r\n// 로딩컴포넌트\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst SidoStatePage = () => {\r\n    /** Hook 기능을 통해 리덕스 상태값 가져오기 */\r\n    const { result, loading, error } = useSelector((state) => {\r\n        return {\r\n            ...state.nowReducer,\r\n        };\r\n    });\r\n\r\n    /** action함수를 dispatch 시키기 위한 기능 가져오기 */\r\n    const dispatch = useDispatch();\r\n\r\n    /** 컴포넌트가 화면에 나타날 때 실행되는 hook 정의 */\r\n    // 여기서 모듈에 정의해 놓은 thunk 함수를 dispatch하면 redux의 액션 함수가 실행되면서 상태값을 갱신하게 된다.\r\n    React.useEffect(() => {\r\n        dispatch(nowReducer.nowAsync());\r\n    }, []);\r\n\r\n    return (\r\n        <div className='container containerTop'>\r\n            \r\n            <Meta title='시도별 발생 동향 ::: 리액트 코로나19 상황판' description='React.js로 구현한 코로나 19의 시도별 발생 동향 상황판 입니다.' keywords='React,코로나19,Covid19,시도별발생동향' />\r\n\r\n            <div className='page-header'>\r\n                <h2>시도별 발생 동향</h2>\r\n            </div>\r\n\r\n            {loading ? (\r\n                <Loader\r\n                    type='Bars'\r\n                    color='#00BFFF'\r\n                    height={100}\r\n                    width={100}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        left: '50%',\r\n                        top: '50%',\r\n                        marginLeft: '-50px',\r\n                        marginTop: '-50px',\r\n                    }}\r\n                />\r\n            ) : (\r\n                // 결과값(result)이 있을 때만 화면 출력\r\n                result && (\r\n                    <div>\r\n                        <SidoConfirmAccChart chartData={result.chartData} />\r\n                        <SidoStateTable state={result.state} />\r\n                    </div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// 리덕스를 호출하는 페이지의 성능 향상을 위해\r\n// React.memo()로 가공된 결과를 export 한다.\r\nexport default React.memo(SidoStatePage);","import React from 'react';\r\nimport { Route, Link, Switch } from 'react-router-dom';\r\n\r\nimport Meta from './components/Meta';\r\nimport Top from './components/Top';\r\nimport KoreaStatePage from './pages/KoreaStatePage';\r\nimport SidoStatePage from './pages/SidoStatePage';\r\n\r\nimport style from './assets/css/style.module.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className={style.containerTop}>\r\n            <Meta />\r\n            <Top />\r\n\r\n            <Switch>\r\n                <Route path={['/', '/korea_state']} component={KoreaStatePage} exact={true} />\r\n                <Route path='/sido_state' component={SidoStatePage} />\r\n            </Switch>\r\n\r\n            <div className={style.footer}>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <p>copyright&copy;itpaper.co.kr</p>\r\n                            <p>이젠아카데미컴퓨터학원</p>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className='text-right'>\r\n                                <p>이 웹 사이트는 이젠컴퓨터아카데미 수업 예제로 활용되고자 구축되었습니다.</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\n// 백엔드 URL이 늘어날 때마다 리듀서 모듈도 함께 늘어난다.\r\nimport allReducer from './AllReducer';\r\nimport nowReducer from './NowReducer';\r\n\r\nexport default combineReducers({\r\n    allReducer,\r\n    nowReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n/** bs */\r\n// node_modules에 있는 bootstrap이 아닌 assets 안에 직접 설치한 css 참조\r\nimport './assets/css/bootstrap.min.css';\r\n\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n/** 리덕스를 위한 참조 추가 */\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createLogger } from 'redux-logger';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\n/** 리덕스 스토어 생성 */\r\nconst logger = createLogger();\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(logger, ReduxThunk)));\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/covid19.5306e75c.jpg\";"],"sourceRoot":""}