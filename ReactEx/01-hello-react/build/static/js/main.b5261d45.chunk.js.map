{"version":3,"sources":["MySubComponent.js","MyComponent1.js","MyComponent2.js","App.js","serviceWorker.js","index.js"],"names":["MySubComponent","MyComponent1","MyComponent2","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAiBeA,EAZQ,WACnB,OACI,6BACI,4BACI,qCACA,qCACA,wCCeDC,MAhBf,WAII,OACI,6BACI,iFACA,uHAEA,kBAAC,EAAD,QCCGC,EAdM,WACjB,OACI,6BACI,2CACA,sDAGA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCaGC,EAVH,WACR,OACI,6BACI,2CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCXQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5261d45.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * 화살표 함수형 컴포넌트\r\n */\r\nconst MySubComponent = () => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <li>item1</li>\r\n                <li>item2</li>\r\n                <li>item3</li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MySubComponent;\r\n","// react 기본 패키지 참조 (필수)\r\nimport React from 'react';\r\n\r\n// 직접 작성한 컴포넌트 참조 --> 정의한 이름을 HTML태그처럼 사용.\r\nimport MySubComponent from './MySubComponent';\r\n\r\n/**\r\n * 함수형 컴포넌트 정의\r\n * - 함수 이름은 혼선을 방지하기 위해 소스파일 이름과 동일하게 구성하는 것이 일반적.\r\n */\r\nfunction MyComponent1() {\r\n    // 리턴은 항상 HTML구조를 의미하는 JSX 문법이어야 하고,\r\n    // JSX 구조는 무조건 단 하나의 태그요소만 반환해야 함.\r\n    // --> 복잡한 구조는 부모 요소 하나에 모두 포함되어야 한다는 의미\r\n    return (\r\n        <div>\r\n            <h2>안녕하세요 리액트</h2>\r\n            <p>리액트 컴포넌트 구조 연습입니다.</p>\r\n\r\n            <MySubComponent />\r\n        </div>\r\n    );\r\n}\r\n\r\n// 이 소스파일에서 정의하는 기능을 -\r\n// 이 파일을 import 하는 다른 파일에서 참조할 수 있도록 내보낸다.\r\nexport default MyComponent1;\r\n","import React from 'react';\r\n\r\n// 직접 작성한 컴포넌트 참조 --> 정의한 이름을 HTML태그처럼 사용.\r\nimport MySubComponent from './MySubComponent';\r\n\r\n/** 함수형 컴포넌트를 익명 함수 스타일로 정의 */\r\nconst MyComponent2 = function() {\r\n    return (\r\n        <div>\r\n            <h2>Virtual DOM</h2>\r\n            <p>This is React Component</p>\r\n\r\n            {/* 컴포넌트는 재사용 가능함 */}\r\n            <MySubComponent />\r\n            <MySubComponent />\r\n            <MySubComponent />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyComponent2;","/**\n * 필요한 패키지 참조하기\n * - 패키지 경로에 \"./\"나 \"../\"가 있는 있는 경우\n *     -> 현재 소스를 기준으로 한 상대경로로 소스파일을 참조함\n * - 패키지 경로가 단어로 시작되는 경우\n *     -> node_modules에서 패키지를 검색하여 참조함\n */\n// 리액트 패키지 참조(필수)\nimport React from 'react';\n\n// 직접 작성한 컴포넌트 참조\nimport Hello from './MyComponent1';\nimport World from './MyComponent2';\n\n/** App이라는 이름의 함수형 컴포넌트(재사용 가능한 HTML 조각단위) 정의 */\n// 프로젝트에서 컴포넌트를 렌더링(화면에 출력)하면 함수에서 반환하고 있는 내용이 브라우저에 나타난다.\n// 반환되는 HTML 코드는 JSX 문법을 사용한다.\n// JSX --> XML과 비슷한 React 전용 Javascript 확장 문법.\nconst App = () => {\n    return (\n        <div>\n            <h1>Hello React</h1>\n            <Hello />\n            <World />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\n * 프로그램 시작점.\n * - 향후 Redux 라는 패키지를 사용하기 전까지는 작업 안함.\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// 이 소스파일과 동일한 위치의 App.js(\"./App\")를 App이라는 이름으로 가져온다.\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/** 컴포넌트를 페이지에 랜더링한다. */\n// App.js에서 정의한 `App`이라는 이름의 컴포넌트를 HTML 태그처럼 사용한다.\n// -> 첫 번째 파라미터: 사용할 컴포넌트\n// -> 두 번째 파라미터: 컴포넌트를 출력할 public/index.html 페이지에 정의되어 있는 요소\n//    프로그램 실행시 \"http://localhost:3000/\" 에 대응되는 위치가 public 폴더.\n// -> <React.StrictMode> 이 적용되어 있는 경우, 선언만 하고 사용되지 않는 변수들에 대한 경고 메시지가 브라우저 콘솔에 표시된다.\n//    개발용이므로 최종 빌드시에는 제거하는 것이 좋다.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}